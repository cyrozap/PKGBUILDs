diff -Naurb heekscad.ori/src/CxfFont.cpp heekscad/src/CxfFont.cpp
--- heekscad.ori/src/CxfFont.cpp	2012-04-30 21:08:26.067558545 +0200
+++ heekscad/src/CxfFont.cpp	2012-04-30 21:20:06.117155204 +0200
@@ -116,7 +116,7 @@
 
 	if (start_angle > end_angle)
 	{
-		end_angle += (2 * PI);
+		end_angle += (2 * M_PI);
 	}
 
 	double increment = (end_angle - start_angle) / number_of_points;
diff -Naurb heekscad.ori/src/CxfFont.h heekscad/src/CxfFont.h
--- heekscad.ori/src/CxfFont.h	2012-04-30 21:08:26.064225293 +0200
+++ heekscad/src/CxfFont.h	2012-04-30 21:09:10.016481284 +0200
@@ -125,11 +125,11 @@
 		public:
 			Arc( const double xcentre, const double ycentre, const double radius, const double start_angle, const double end_angle ) :
 			  m_xcentre(xcentre), m_ycentre(ycentre), m_radius(radius),
-				m_start_angle((start_angle / 360.0) * (2 * PI)),
-				m_end_angle((end_angle / 360.0) * (2 * PI))
+				m_start_angle((start_angle / 360.0) * (2 * M_PI)),
+				m_end_angle((end_angle / 360.0) * (2 * M_PI))
 			  {
-				if (m_start_angle < 0) m_start_angle += (2 * PI);
-				if (m_end_angle < 0) m_end_angle += (2 * PI);
+				if (m_start_angle < 0) m_start_angle += (2 * M_PI);
+				if (m_end_angle < 0) m_end_angle += (2 * M_PI);
 
 				std::list<gp_Pnt> points = Interpolate(gp_Pnt(0.0, 0.0, 0.0), 20 );
 				for (std::list<gp_Pnt>::const_iterator l_itPoint = points.begin();
diff -Naurb heekscad.ori/src/HAngularDimension.cpp heekscad/src/HAngularDimension.cpp
--- heekscad.ori/src/HAngularDimension.cpp	2012-04-30 21:08:26.060892041 +0200
+++ heekscad/src/HAngularDimension.cpp	2012-04-30 21:14:53.604766129 +0200
@@ -151,21 +151,21 @@
 
 
 		//Figure out if which way the lines should be pointing
-		while(a1 - ca > PI)
-			a1 -= PI;
-		while(a1 - ca < -PI)
-			a1 += PI;
-		while(a2 - ca > PI)
-			a2 -= PI;
-		while(a2 - ca < -PI)
-			a2 += PI;
+		while(a1 - ca > M_PI)
+			a1 -= M_PI;
+		while(a1 - ca < -M_PI)
+			a1 += M_PI;
+		while(a2 - ca > M_PI)
+			a2 -= M_PI;
+		while(a2 - ca < -M_PI)
+			a2 += M_PI;
 
 
 		//Need to find DA and compensate for the 2*Pi period of atan2
 		double da = a2 - a1;
-		while(da > PI)
+		while(da > M_PI)
 			da -= 2*Pi;
-		while(da < -PI)
+		while(da < -M_PI)
 			da += 2*Pi;
 
 		// double ma = a1 + da/2;
@@ -195,7 +195,7 @@
 		}
 		else
 		{
-			double offset = da > 0? PI/20 : -PI/20;
+			double offset = da > 0? M_PI/20 : -M_PI/20;
 			if((ca < a1) ^ (da < 0))
 			{
 				DrawArc(pnt,r,ca,a1);
diff -Naurb heekscad.ori/src/HArc.cpp heekscad/src/HArc.cpp
--- heekscad.ori/src/HArc.cpp	2012-04-30 21:08:26.060892041 +0200
+++ heekscad/src/HArc.cpp	2012-04-30 21:16:16.256090593 +0200
@@ -797,12 +797,12 @@
 	int dir = (this->m_axis.Direction().Z() > 0) ? 1:-1;
 	if(inc_ang > 1. - 1.0e-10) return 0;
 	if(inc_ang < -1. + 1.0e-10)
-		inc_ang = PI;  
+		inc_ang = M_PI;  
 	else {									// dot product,   v1 . v2  =  cos ang
 		if(inc_ang > 1.0) inc_ang = 1.0;
 		inc_ang = acos(inc_ang);									// 0 to pi radians
 
-		if(dir * (vs ^ ve).Z() < 0) inc_ang = 2 * PI - inc_ang ;		// cp
+		if(dir * (vs ^ ve).Z() < 0) inc_ang = 2 * M_PI - inc_ang ;		// cp
 	}
 	return dir * inc_ang;
 }
diff -Naurb heekscad.ori/src/HDimension.cpp heekscad/src/HDimension.cpp
--- heekscad.ori/src/HDimension.cpp	2012-04-30 21:08:26.057558789 +0200
+++ heekscad/src/HDimension.cpp	2012-04-30 21:17:22.891135538 +0200
@@ -207,7 +207,7 @@
 			model_view, projection, viewport,
 			&x, &y, &z);
 
-		wxGetApp().render_screen_text_at(text, scale*8,x,y,atan2(xdir.Y(),xdir.X()) * 180 / PI);
+		wxGetApp().render_screen_text_at(text, scale*8,x,y,atan2(xdir.Y(),xdir.X()) * 180 / M_PI);
 	}
 	else
 	{
diff -Naurb heekscad.ori/src/HEllipse.cpp heekscad/src/HEllipse.cpp
--- heekscad.ori/src/HEllipse.cpp	2012-04-30 21:08:26.054225537 +0200
+++ heekscad/src/HEllipse.cpp	2012-04-30 21:20:59.185858758 +0200
@@ -543,7 +543,7 @@
 		double t = m_majr;
 		m_majr = m_minr;
 		m_minr = t;
-		SetRotation(m_rot+PI/2);
+		SetRotation(m_rot+M_PI/2);
 	}
 	else
 		SetRotation(m_rot);
diff -Naurb heekscad.ori/src/OrientationModifier.cpp heekscad/src/OrientationModifier.cpp
--- heekscad.ori/src/OrientationModifier.cpp	2012-04-30 21:08:26.054225537 +0200
+++ heekscad/src/OrientationModifier.cpp	2012-04-30 21:17:55.657004082 +0200
@@ -478,14 +478,14 @@
 				{
 				    for (int i=0; i<m_params.m_number_of_rotations; i++)
 				    {
-				        angle += (PI / 2.0);
+				        angle += (M_PI / 2.0);
 				    }
 				}
 				else
 				{
 				    for (int i=m_params.m_number_of_rotations; i<0; i++)
 				    {
-				        angle -= (PI / 2.0);
+				        angle -= (M_PI / 2.0);
 				    }
 				}
 
diff -Naurb heekscad.ori/src/Polygon.cpp heekscad/src/Polygon.cpp
--- heekscad.ori/src/Polygon.cpp	2012-04-30 21:08:26.064225293 +0200
+++ heekscad/src/Polygon.cpp	2012-04-30 21:22:35.970158136 +0200
@@ -38,8 +38,8 @@
 	double v1a = atan2(v1.Y(), v1.X());
 	double v2a = atan2(v2.Y(), v2.X());
 	double angle = v2a - v1a;
-	if(angle <= -PI) angle += PI*2;
-	else if(angle > PI) angle -= PI*2;
+	if(angle <= -M_PI) angle += M_PI*2;
+	else if(angle > M_PI) angle -= M_PI*2;
 	return angle;
 }
 
@@ -1520,8 +1520,8 @@
 				double v1a = atan2(v1.Y(), v1.X());
 				double v2a = atan2(v2.Y(), v2.X());
 				double angle = v2a - v1a;
-				if(angle <= -PI) angle += PI*2;
-				else if(angle > PI) angle -= PI*2;
+				if(angle <= -M_PI) angle += M_PI*2;
+				else if(angle > M_PI) angle -= M_PI*2;
 				if(UPODEBUG)std::cout<<"\t angle="<<angle<<std::endl;
 				
 				//if the end of the intersecting line is equal to the
@@ -1548,8 +1548,8 @@
 						gp_Vec v3(a2, a3);
 						double v3a = atan2(v3.Y(), v3.X());
 						double angle = v3a - v2a;
-						if(angle <= -PI) angle += PI*2;
-						else if(angle > PI) angle -= PI*2;
+						if(angle <= -M_PI) angle += M_PI*2;
+						else if(angle > M_PI) angle -= M_PI*2;
 						if(UPODEBUG)std::cout<<"\t angle="<<angle<<std::endl;
 						if(angle < 0.0000000001){
 							if(UPODEBUG)std::cout<<"\t line not useful: turns to right or doesn't turn"<<std::endl;
diff -Naurb heekscad.ori/src/RS274X.cpp heekscad/src/RS274X.cpp
--- heekscad.ori/src/RS274X.cpp	2012-04-30 21:08:26.057558789 +0200
+++ heekscad/src/RS274X.cpp	2012-04-30 21:25:30.602544201 +0200
@@ -1429,7 +1429,7 @@
 				double mirror[16];
 				gp_Ax1 mirror_axis = gp_Ax1(gp_Pnt(0,0,0), gp_Dir(1,0,0));
 				gp_Trsf rotation;
-				rotation.SetRotation( mirror_axis, PI );
+				rotation.SetRotation( mirror_axis, M_PI );
 				extract(rotation, mirror);
 				object->ModifyByMatrix(mirror);
 			}
@@ -1450,7 +1450,7 @@
 					double mirror[16];
 					gp_Ax1 mirror_axis = gp_Ax1(gp_Pnt(0,0,0), gp_Dir(1,0,0));
 					gp_Trsf rotation;
-					rotation.SetRotation( mirror_axis, PI );
+					rotation.SetRotation( mirror_axis, M_PI );
 					extract(rotation, mirror);
 					object->ModifyByMatrix(mirror);
 				}
@@ -1580,7 +1580,7 @@
 				double mirror[16];
 				gp_Ax1 mirror_axis = gp_Ax1(gp_Pnt(0,0,0), gp_Dir(1,0,0));
 				gp_Trsf rotation;
-				rotation.SetRotation( mirror_axis, PI );
+				rotation.SetRotation( mirror_axis, M_PI );
 				extract(rotation, mirror);
 				sketch->ModifyByMatrix(mirror);
 			}
@@ -1607,7 +1607,7 @@
 			double mirror[16];
 			gp_Ax1 mirror_axis = gp_Ax1(gp_Pnt(0,0,0), gp_Dir(1,0,0));
 			gp_Trsf rotation;
-			rotation.SetRotation( mirror_axis, PI );
+			rotation.SetRotation( mirror_axis, M_PI );
 			extract(rotation, mirror);
 			sketch->ModifyByMatrix(mirror);
 		}
@@ -1961,7 +1961,7 @@
     gp_Vec reference( 0, 0, 1 );    // Looking from the top down.
 
     double angle = vector1.AngleWithRef( vector2, reference );
-    while (angle < minimum_angle) angle += (2 * PI);
+    while (angle < minimum_angle) angle += (2 * M_PI);
     return(angle);
 }
 
@@ -2006,21 +2006,21 @@
 			if ((abs(m_i_term) < m_tolerance) && (abs(m_j_term) < m_tolerance) && (Radius() > m_tolerance))
 			{
 				// It's a full circle.
-				return(2.0 * PI * Radius());
+				return(2.0 * M_PI * Radius());
 			} // End if - then
 			else
 			{
 				if ((Start().Distance(End()) < 0.000001) && (Radius() < 0.00001)) return(0.0);
 
 				double arc_angle = EndAngle() - StartAngle();
-				double arc_length = (arc_angle / (2.0 * PI)) * (2.0 * PI * Radius());
+				double arc_length = (arc_angle / (2.0 * M_PI)) * (2.0 * M_PI * Radius());
 				return(abs(arc_length));
 			} // End if - else
 			break;
 
 		case eFlash:
 		default:
-			return( 2.0 * PI * Radius() );
+			return( 2.0 * M_PI * Radius() );
 	} // End switch
 } // End Length() method
 
@@ -2210,13 +2210,13 @@
 				gp_Pnt p1 = Start().Translated(vx*radius*cos(StartAngle())+vy*radius*sin(StartAngle()));
 
 				radius = (m_aperture.OutsideDiameter()/2.0);
-				gp_Pnt p2 = Start().Translated(vx*radius*cos(StartAngle() + PI)+vy*radius*sin(StartAngle() + PI));
+				gp_Pnt p2 = Start().Translated(vx*radius*cos(StartAngle() + M_PI)+vy*radius*sin(StartAngle() + M_PI));
 
 				radius = (m_aperture.OutsideDiameter()/2.0);
 				gp_Pnt p3 = End().Translated(vx*radius*cos(EndAngle())+vy*radius*sin(EndAngle()));
 
 				radius = (m_aperture.OutsideDiameter()/2.0);
-				gp_Pnt p4 = End().Translated(vx*radius*cos(EndAngle() + PI)+vy*radius*sin(EndAngle() + PI));
+				gp_Pnt p4 = End().Translated(vx*radius*cos(EndAngle() + M_PI)+vy*radius*sin(EndAngle() + M_PI));
 
 				gp_Dir dir1, dir2;
 
